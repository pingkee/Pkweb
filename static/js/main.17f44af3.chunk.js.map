{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","constraints","audio","video","facingMode","start","a","navigator","mediaDevices","getUserMedia","catch","error","alert","stream","document","getElementById","style","width","height","setAttribute","srcObject","onloadedmetadata","e","play","textAlign","fontSize","margin","minHeight","fontFamily","marginBottom","marginTop","fontWeight","border","maxWidth","id","autoPlay","playsInline","type","onClick","value","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","console","message"],"mappings":"6PA4FeA,G,MAzFO,WACpB,IAUIC,EAAc,CAChBC,OAAO,EACPC,MAAO,CACLC,WAAY,SAGVC,EAAK,uCAAG,8BAAAC,EAAA,sEACSC,UAAUC,aAAaC,aAAaR,GACxDS,OAAM,SAACC,GACNC,MAAM,6BAHI,OACNC,EADM,QAKNV,EAAQW,SAASC,eAAe,UAChCC,MAAMC,MAAQ,OACpBd,EAAMa,MAAME,OAAS,OACrBf,EAAMgB,aAAa,cAAe,QAClChB,EAAMgB,aAAa,WAAY,QAC3BN,IACFV,EAAMiB,UAAYP,GAEpBV,EAAMkB,iBAAmB,SAASC,GAChCnB,EAAMoB,QAdI,4CAAH,qDAkBX,OACE,6BACE,gCAlCA,yBAAKP,MAAO,CAAEQ,UAAW,SAAUC,SAAU,KAA7C,aAEE,yBAAKT,MAAO,CAAES,SAAU,KAAxB,qBAmCF,yBACAT,MAAO,CACLU,OAAQ,SAAUC,UAAW,UAE7B,yBAAKX,MAAO,CACVS,SAAU,GAAIG,WAAY,mBAC1BC,aAAc,SAAUC,UAAW,OACnCC,WAAY,SAHd,aAJF,itKAsCA,yBAAKf,MAAO,CACRS,SAAU,GAAIG,WAAY,mBAC1BI,OAAQ,kBAAmBC,SAAU,OACrCJ,aAAc,OAAQC,UAAW,SACnC,2BAAOI,GAAG,QAAQC,UAAQ,EAACC,aAAW,IACtC,2BAAOC,KAAK,SAASC,QAAS,kBAAMjC,KAASkC,MAAM,oBC1EvCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFhC,SAASC,eAAe,SDmIpB,kBAAmBR,WACrBA,UAAUwC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.17f44af3.chunk.js","sourcesContent":["import React, { FC, } from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const header = () => {\n    return  (\n      <div style={{ textAlign: 'center', fontSize: 28 }}>\n        My Web App\n        <div style={{ fontSize: 14 }}>\n          version 1.0.0.6\n        </div>\n      </div>\n    )\n  };\nconst constraints = {\n    audio: false,\n    video: {\n      facingMode: 'user'\n  }\n};\n  const start = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints)\n    .catch((error: Error) => {\n      alert('Unable to start camera');\n    });\n    const video = document.getElementById('video') as HTMLVideoElement;\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.setAttribute(\"playsinline\", \"true\");\n    video.setAttribute(\"controls\", \"true\");\n    if (stream) {\n      video.srcObject = stream;\n    }\n    video.onloadedmetadata = function(e) {\n      video.play();\n    }\n}\n  \n  return (\n    <div>\n      <header>\n      {header()}\n      </header>\n      <div\n      style={{\n        margin: '0.5rem', minHeight: '100vh',\n        }}>\n        <div style={{\n          fontSize: 18, fontFamily: 'Playfair Display',\n          marginBottom: '0.2rem', marginTop: '2rem',\n          fontWeight: 'bold' }}>\n          Who am I?\n        </div>\n          I am a Front end developer for ST Electronics in Singapore.\n        I am interested in web and mobile development with great passion for\n        UI effects, animations and creating intuitive, dynamic user experiences. I build personal\n        webpages and mobile as a freelancer outside my working hours. the below are the privacy policy\n        of my app:\n        Terms & Conditions\nBy downloading or using the app, these terms will automatically apply to you – you should make sure therefore that you read them carefully before using the app. You’re not allowed to copy, or modify the app, any part of the app, or our trademarks in any way. You’re not allowed to attempt to extract the source code of the app, and you also shouldn’t try to translate the app into other languages, or make derivative versions. The app itself, and all the trade marks, copyright, database rights and other intellectual property rights related to it, still belong to Lawrence.\nLawrence is committed to ensuring that the app is as useful and efficient as possible. For that reason, we reserve the right to make changes to the app or to charge for its services, at any time and for any reason. We will never charge you for the app or its services without making it very clear to you exactly what you’re paying for.\nThe pkwebapp app stores and processes personal data that you have provided to us, in order to provide my Service. It’s your responsibility to keep your phone and access to the app secure. We therefore recommend that you do not jailbreak or root your phone, which is the process of removing software restrictions and limitations imposed by the official operating system of your device. It could make your phone vulnerable to malware/viruses/malicious programs, compromise your phone’s security features and it could mean that the pkwebapp app won’t work properly or at all.\nThe app does use third party services that declare their own Terms and Conditions.\nLink to Terms and Conditions of third party service providers used by the app\n•\tGoogle Play Services\n•\tAdMob\n•\tFacebook\n•\tExpo\nYou should be aware that there are certain things that Lawrence will not take responsibility for. Certain functions of the app will require the app to have an active internet connection. The connection can be Wi-Fi, or provided by your mobile network provider, but Lawrence cannot take responsibility for the app not working at full functionality if you don’t have access to Wi-Fi, and you don’t have any of your data allowance left.\nIf you’re using the app outside of an area with Wi-Fi, you should remember that your terms of the agreement with your mobile network provider will still apply. As a result, you may be charged by your mobile provider for the cost of data for the duration of the connection while accessing the app, or other third party charges. In using the app, you’re accepting responsibility for any such charges, including roaming data charges if you use the app outside of your home territory (i.e. region or country) without turning off data roaming. If you are not the bill payer for the device on which you’re using the app, please be aware that we assume that you have received permission from the bill payer for using the app.\nAlong the same lines, Lawrence cannot always take responsibility for the way you use the app i.e. You need to make sure that your device stays charged – if it runs out of battery and you can’t turn it on to avail the Service, Lawrence cannot accept responsibility.\nWith respect to Lawrence’s responsibility for your use of the app, when you’re using the app, it’s important to bear in mind that although we endeavour to ensure that it is updated and correct at all times, we do rely on third parties to provide information to us so that we can make it available to you. Lawrence accepts no liability for any loss, direct or indirect, you experience as a result of relying wholly on this functionality of the app.\nAt some point, we may wish to update the app. The app is currently available on iOS – the requirements for system(and for any additional systems we decide to extend the availability of the app to) may change, and you’ll need to download the updates if you want to keep using the app. Lawrence does not promise that it will always update the app so that it is relevant to you and/or works with the iOS version that you have installed on your device. However, you promise to always accept updates to the application when offered to you, We may also wish to stop providing the app, and may terminate use of it at any time without giving notice of termination to you. Unless we tell you otherwise, upon any termination, (a) the rights and licenses granted to you in these terms will end; (b) you must stop using the app, and (if needed) delete it from your device.\nChanges to This Terms and Conditions\nI may update our Terms and Conditions from time to time. Thus, you are advised to review this page periodically for any changes. I will notify you of any changes by posting the new Terms and Conditions on this page.\nThese terms and conditions are effective as of 2020-05-07\nContact Us\nIf you have any questions or suggestions about my Terms and Conditions, do not hesitate to contact me at +65 94796642. \n\n\n      </div>\n      <div style={{\n          fontSize: 18, fontFamily: 'Playfair Display',\n          border: 'solid black 1px', maxWidth: '100%',\n          marginBottom: '2rem', marginTop: '2rem' }}>\n        <video id='video' autoPlay playsInline></video>\n        <input type='button' onClick={() => start()} value='Start Video' />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}