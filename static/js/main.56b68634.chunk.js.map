{"version":3,"sources":["public/Profile.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","style","maxWidth","margin","display","flexWrap","alignContent","alignItems","justifyContent","fontFamily","border","backgroundColor","width","height","padding","src","require","alt","borderRadius","marginBottom","marginLeft","fontSize","textAlign","fontWeight","fontStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,qC,wEC0J5BC,G,UAvJO,WAwHpB,OACE,6BACE,yBACEC,MAAO,CAELC,SAAU,KACVC,OAAQ,SAER,yBACAF,MAAO,CAELE,OAAQ,SAGRC,QAAS,OACTC,SAAU,OACVC,aAAc,gBACdC,WAAY,UACZC,eAAgB,SAChBC,WAAY,oCA7GpB,yBACAR,MAAO,CACLE,OAAQ,SACRO,OAAQ,sBACRC,gBAAiB,QAEjBC,MAAO,IACPC,OAAQ,IACRC,QAAS,KAGL,yBACEC,IAAKC,EAAQ,IACbC,IAAI,SACJhB,MAAO,CAAEY,OAAQ,IAAKD,MAAO,IAAKM,aAAc,GAAIC,aAAc,EAAGC,WAAY,MAErF,yBAAKnB,MAAO,CACVoB,SAAU,oBACVF,aAAc,GACdG,UAAW,SACXC,WAAY,SAJd,eAOA,yBAAKtB,MAAO,CACVoB,SAAU,oBACVF,aAAc,GACdK,UAAW,WAHb,qDAOA,yBAAKvB,MAAO,CACVoB,SAAU,sBADZ,yBAGE,6BAHF,+BAKE,6BALF,mDA1DJ,yBACApB,MAAO,CACLE,OAAQ,SACRO,OAAQ,sBACRC,gBAAiB,QACjBW,UAAW,UACXV,MAAO,IACPC,OAAQ,IACRC,QAAS,KAGP,yBAAKb,MAAO,CACVoB,SAAU,oBACVF,aAAc,GACdI,WAAY,SAHd,gBAMA,yBAAKtB,MAAO,CACVoB,SAAU,sBADZ,6RAoDJ,yBACApB,MAAO,CACLE,OAAQ,SACRQ,gBAAiB,QACjBD,OAAQ,sBACRY,UAAW,UACXV,MAAO,IACPE,QAAS,KAGP,yBAAKb,MAAO,CACVoB,SAAU,oBACVF,aAAc,GACdI,WAAY,SAHd,gCAMA,yBAAKtB,MAAO,CACVoB,SAAU,sBADZ,oDAEmD,6BAFnD,oIAIyE,6BAJzE,6CAUJ,yBACApB,MAAO,CACLE,OAAQ,SACRO,OAAQ,sBACRC,gBAAiB,QACjBW,UAAW,UACXV,MAAO,IACPE,QAAS,KAGP,yBAAKb,MAAO,CACVoB,SAAU,oBACVF,aAAc,GACdI,WAAY,SAHd,iBAMA,yBAAKtB,MAAO,CACVoB,SAAU,sBADZ,yDAE0D,6BAF1D,2CCxGYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56b68634.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile.d3166ee3.png\";","import React, { FC, } from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const CurrentWork = () => (\n    <div\n    style={{\n      margin: '0.5rem',\n      border: 'solid lightblue 2px',\n      backgroundColor: 'white',\n      textAlign: 'justify',\n      width: 600,\n      height: 150,\n      padding: 15\n      // minHeight: '100vh',\n      }}>\n        <div style={{\n          fontSize: 'calc(8px + 2vmin)',\n          marginBottom: 10,\n          fontWeight: 'bold', }}>\n          Current Work\n        </div>\n        <div style={{\n          fontSize: 'calc(7px + 1vmin)' }}>\n          I am a Front end developer for ST Electronics in Singapore.\n          I am interested in web and mobile development with great passion for\n          UI effects, animations and creating intuitive, dynamic user experiences. I build personal\n          webpages and mobile as a freelancer outside my working hours.\n      </div>\n    </div>\n  );\n  \n  const ProfileImage = () => (\n    <div\n    style={{\n      margin: '0.5rem',\n      border: 'solid lightblue 2px',\n      backgroundColor: 'white',\n      // textAlign: 'justify',\n      width: 200,\n      height: 350,\n      padding: 15\n      // minHeight: '100vh',\n      }}>\n          <img\n            src={require(\"./public/Profile.png\")}\n            alt=\"My Pic\"\n            style={{ height: 150, width: 150, borderRadius: 98, marginBottom: 5, marginLeft: 25}}\n            />\n        <div style={{\n          fontSize: 'calc(8px + 1vmin)',\n          marginBottom: 10,\n          textAlign: 'center',\n          fontWeight: 'bold', }}>\n          Ng Ping Kee\n        </div>\n        <div style={{\n          fontSize: 'calc(3px + 1vmin)',\n          marginBottom: 25,\n          fontStyle: 'italic',\n          }}>\n          \"If the technology is out there, it can be done.\" \n        </div>\n        <div style={{\n          fontSize: 'calc(7px + 1vmin)'}}>\n          - Full Stack Developer\n          <br />\n          - Web/Mobile (IOS & Android)\n          <br />\n          - Scrum Alliance® Certified ScrumMaster®\n      </div>\n    </div>\n  );\n  const DeveloperEx = () => (\n    <div\n    style={{\n      margin: '0.5rem',\n      backgroundColor: 'white',\n      border: 'solid lightblue 2px',\n      textAlign: 'justify',\n      width: 400,\n      padding: 15\n      // minHeight: '100vh',\n      }}>\n        <div style={{\n          fontSize: 'calc(8px + 2vmin)',\n          marginBottom: 10,\n          fontWeight: 'bold', }}>\n          My Experience as a Developer\n        </div>\n        <div style={{\n          fontSize: 'calc(7px + 1vmin)'}}>\n          Full stack developer at ST Electronics (Infosoft)<br />\n          Design build and manage a custom web app used by the gov.\n          Also worked with infosys developing fincale API for DBS Bank Siingapore<br />\n          Privately build Web App and Mobile Apps.\n      </div>\n    </div>\n  );\n  const CurrentStack = () => (\n    <div\n    style={{\n      margin: '0.5rem',\n      border: 'solid lightblue 2px',\n      backgroundColor: 'white',\n      textAlign: 'justify',\n      width: 400,\n      padding: 15\n      // minHeight: '100vh',\n      }}>\n        <div style={{\n          fontSize: 'calc(8px + 2vmin)',\n          marginBottom: 10,\n          fontWeight: 'bold', }}>\n          Current Stack\n        </div>\n        <div style={{\n          fontSize: 'calc(7px + 1vmin)'}}>\n            - ReactJS, React Native, HTML, CSS, Javascript, nodeJs<br />\n            - FeathersJS, PHP, MongoDB, MySQL\n      </div>\n    </div>\n  );\n  return (\n    <div>\n      <div\n        style={{\n          // display: 'flex',\n          maxWidth: 1200,\n          margin: 'auto',\n          }}>\n          <div\n          style={{\n            // backgroundColor: '#282c34',\n            margin: '0.5rem',\n            // border: 'solid white 1px',\n            // height: '80vh',\n            display: 'flex',\n            flexWrap: 'wrap',\n            alignContent: 'space-between',\n            alignItems: 'stretch',\n            justifyContent: 'center',\n            fontFamily: '\"Times New Roman\", Times, serif',\n            }}>\n            {ProfileImage()}\n            {CurrentWork()}\n            {DeveloperEx()}\n            {CurrentStack()}\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}