{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","constraints","audio","video","facingMode","start","a","navigator","mediaDevices","getUserMedia","stream","document","getElementById","setAttribute","srcObject","onloadedmetadata","e","play","style","textAlign","fontSize","margin","minHeight","fontFamily","marginBottom","marginTop","fontWeight","border","id","autoPlay","playsInline","type","onClick","value","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PA+DeA,G,MA5DO,WACpB,IAYIC,EAAc,CAChBC,OAAO,EACPC,MAAO,CACLC,WAAY,SAGVC,EAAK,uCAAG,8BAAAC,EAAA,sEACSC,UAAUC,aAAaC,aAAaR,GAD7C,OACNS,EADM,QAENP,EAAQQ,SAASC,eAAe,UAChCC,aAAa,cAAe,QAClCV,EAAMU,aAAa,WAAY,QAC/BV,EAAMW,UAAYJ,EAClBP,EAAMY,iBAAmB,SAASC,GAChCb,EAAMc,QAPI,2CAAH,qDAWX,OACE,6BACE,gCA7BA,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,SAAU,KAA7C,eAgCA,yBACAF,MAAO,CACLG,OAAQ,SAAUC,UAAW,UAE7B,yBAAKJ,MAAO,CACVE,SAAU,GAAIG,WAAY,mBAC1BC,aAAc,SAAUC,UAAW,OACnCC,WAAY,SAHd,aAJF,6MAcA,yBAAKR,MAAO,CACRE,SAAU,GAAIG,WAAY,mBAC1BI,OAAQ,kBAAmBL,UAAW,QACtCE,aAAc,OAAQC,UAAW,SACnC,2BAAOG,GAAG,QAAQC,UAAQ,EAACC,aAAW,IACtC,2BAAOC,KAAK,SAASC,QAAS,kBAAM3B,KAAS4B,MAAM,oBC7CvCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACF7B,SAASC,eAAe,SDmIpB,kBAAmBL,WACrBA,UAAUkC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.013335db.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const header = () => {\n    return  (\n      <div style={{ textAlign: 'center', fontSize: 28 }}>\n        My Web App\n      </div>\n    )\n  };\n  \n  // useEffect(() => {\n  //   start()\n  // })\n\nconst constraints = {\n    audio: false,\n    video: {\n      facingMode: 'user'\n  }\n};\n  const start = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints)\n    const video = document.getElementById('video') as HTMLVideoElement;\n    video.setAttribute(\"playsinline\", \"true\");\n    video.setAttribute(\"controls\", \"true\");\n    video.srcObject = stream;\n    video.onloadedmetadata = function(e) {\n      video.play();\n    }\n}\n  \n  return (\n    <div>\n      <header>\n      {header()}\n      </header>\n      <div\n      style={{\n        margin: '0.5rem', minHeight: '100vh',\n        }}>\n        <div style={{\n          fontSize: 18, fontFamily: 'Playfair Display',\n          marginBottom: '0.2rem', marginTop: '2rem',\n          fontWeight: 'bold' }}>\n          Who am I?\n        </div>\n          I am a Front end developer for ST Electronics in Singapore.\n        I am interested in web and mobile development with great passion for\n        UI effects, animations and creating intuitive, dynamic user experiences.\n      </div>\n      <div style={{\n          fontSize: 18, fontFamily: 'Playfair Display',\n          border: 'solid black 1px', minHeight: '250px',\n          marginBottom: '2rem', marginTop: '2rem' }}>\n        <video id='video' autoPlay playsInline></video>\n        <input type='button' onClick={() => start()} value='Start Video' />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}